// Copyright Epic Games, Inc. All Rights Reserved.

#ifndef DIM_DENOISER_OUTPUT
	#define DIM_DENOISER_OUTPUT 0
#endif

#include "../Common.ush"

#define SUPPORT_CONTACT_SHADOWS		0
#define USE_SOURCE_TEXTURE			1
#define USE_SOURCE_TEXTURE_ARRAY	1

#define LTCMatTexture				RaytracingLightsDataPacked.LTCMatTexture
#define LTCMatSampler				GlobalBilinearClampedSampler
#define LTCAmpTexture				RaytracingLightsDataPacked.LTCAmpTexture
#define LTCAmpSampler				GlobalBilinearClampedSampler
#define PreIntegratedGF				ReflectionStruct.PreIntegratedGF
#define PreIntegratedGFSampler		GlobalBilinearClampedSampler

#include "../DeferredShadingCommon.ush"
#include "../DeferredLightingCommon.ush"
#include "../ReflectionEnvironmentShared.ush"
#include "../Montecarlo.ush"
#include "../PathTracing/Utilities/PathTracingRandomSequence.ush" 
#include "../HeightFogCommon.ush"
#include "../SobolRandom.ush"
#include "../SceneTextureParameters.ush"
#include "RayTracingCommon.ush"
#include "RayTracingDeferredShadingCommon.ush"
#include "RayTracingHitGroupCommon.ush"
#include "RayTracingDirectionalLight.ush"
#include "RayTracingRectLight.ush"
#include "RayTracingSphereLight.ush"
#include "RayTracingSpotLight.ush"
#include "RayTracingPointLight.ush"
#include "RayTracingLightingCommon.ush"

#define	ERayTracingPrimaryRaysFlag_None                               0
#define	ERayTracingPrimaryRaysFlag_UseGBufferForMaxDistance    (1u << 0)
#define	ERayTracingPrimaryRaysFlag_ConsiderSurfaceScatter	   (1u << 1)
#define	ERayTracingPrimaryRaysFlag_AllowSkipSkySample		   (1u << 2)


int SamplesPerPixel;
int MaxRefractionRays;
int HeightFog;
int ReflectedShadowsType;
int ShouldDoDirectLighting;
int ShouldDoEmissiveAndIndirectLighting;
int UpscaleFactor;
int ShouldUsePreExposure;
uint PrimaryRayFlags;

float TranslucencyMinRayDistance;
float TranslucencyMaxRayDistance;
float TranslucencyMaxRoughness;
int  TranslucencyRefraction;
float MaxNormalBias;

Texture2D SceneColorTexture;

StructuredBuffer<FRTLightingData> LightDataBuffer;
RaytracingAccelerationStructure TLAS;

RWTexture2D<float4> ColorOutput;
RWTexture2D<float> RayImaginaryDepthOutput;
RWTexture2D<float> RayHitDistanceOutput;
RWTexture2D<float4> CausticsColorOutput;

#include "RayTracingLightingCommon.ush"
#include "Utils.ush"

float3 GetSkyRadiance(float3 Direction, float Roughness)
{
	float SkyAverageBrightness = 1.0f;
	return GetSkyLightReflection(Direction, Roughness, SkyAverageBrightness);
}



RAY_TRACING_ENTRY_RAYGEN(RayTracingPrimaryRaysRGS)
{
	uint2 DispatchThreadId = DispatchRaysIndex().xy + View.ViewRectMin;
	uint2 PixelCoord = GetPixelCoord(DispatchThreadId, UpscaleFactor);
	uint LinearIndex = PixelCoord.y * View.BufferSizeAndInvSize.x + PixelCoord.x;
	
	uint LightSize, Stride;
    LightDataBuffer.GetDimensions(LightSize, Stride);
	float3 BTDF = 0.0f;

	RandomSequence RandSequence;
	RandomSequence_Initialize(RandSequence, LinearIndex, View.StateFrameIndex);

	float2 InvBufferSize = View.BufferSizeAndInvSize.zw;
	float2 UV = (float2(PixelCoord) + 0.5) * InvBufferSize;

#if 0
	FGBufferData GBufferData = GetGBufferDataFromSceneTextures(UV);
#else
	//#dxr-todo: workaround for flickering. UE-87281
	FGBufferData GBufferData = GetGBufferDataFromSceneTexturesLoad(PixelCoord);
#endif

	float Depth = GBufferData.Depth;
	float3 WorldPosition = ReconstructWorldPositionFromDepth(UV, Depth);
	float WorldSpaceDistance = length(WorldPosition - View.WorldViewOrigin);

	// Trace rays from camera origin to (Gbuffer - epsilon) to only intersect translucent objects
	RayDesc Ray = CreatePrimaryRay(UV);
	FRayCone RayCone = (FRayCone)0;
	RayCone.SpreadAngle = View.EyeToPixelSpreadAngle;

	if((ERayTracingPrimaryRaysFlag_UseGBufferForMaxDistance & PrimaryRayFlags) != 0) 
	{
		Ray.TMax = WorldSpaceDistance - 0.1;
	}

	bool bAllowSkySampling;
	if((ERayTracingPrimaryRaysFlag_AllowSkipSkySample & PrimaryRayFlags) != 0) 
	{
		// Sky is only sampled when infinite reflection rays are used.
		bAllowSkySampling =  TranslucencyMaxRayDistance < 0;
	} 
	else 
	{
		bAllowSkySampling = true;
	}
	// Check if the Sky Light should affect reflection rays within translucency.
	const bool bSkyLightAffectReflection = ShouldSkyLightAffectReflection();
	
	bool bHasScattered = (ERayTracingPrimaryRaysFlag_ConsiderSurfaceScatter & PrimaryRayFlags) != 0;
	float AccumulatedOpacity = 0.0;

	// Integrated data by path tracing
	float3 PathRadiance = 0.0;
	float3 FirstPathRadiance = 0.0;

	float PathThroughput = 1.0;	// A float for now because UE does not support colored translucency as of today.
	float LastRoughness = 0.0;
	float HitDistance = 0.0f;

	// Parameters of RTBSDF
	float LastIor = 1.0f;
	float3 DielectricAbsorbColor = float3(0.0f, 0.0f, 0.0f);
	float3 LastRayDirection = float3(0, 0, 0);
	float DielectricRoughness = 0;
	float DielectircOpacity = 0.0f;

	bool bIsInside = false;
	float AbsorbDistance = 0.0f;

	float ImaginaryDepth = 0.0f;

	for (uint RefractionRayIndex = 0; RefractionRayIndex < MaxRefractionRays; ++RefractionRayIndex)
	{
		
		const uint RefractionRayFlags = 0;
		const uint RefractionInstanceInclusionMask = RAY_TRACING_MASK_ALL;
		const bool bRefractionRayTraceSkyLightContribution = false;
		const bool bRefractionDecoupleSampleGeneration = true;
		const bool bRefractionEnableSkyLightContribution = true;
		float3 PathVertexRadiance = float3(0, 0, 0);

		FMaterialClosestHitPayload Payload = TraceRayAndAccumulateResults(
			Ray,
			TLAS,
			RefractionRayFlags,
			RefractionInstanceInclusionMask,
			RandSequence,
			PixelCoord,
			MaxNormalBias,
			ReflectedShadowsType,
			ShouldDoDirectLighting,
			ShouldDoEmissiveAndIndirectLighting,
			bRefractionRayTraceSkyLightContribution,
			bRefractionDecoupleSampleGeneration,
			RayCone,
			bRefractionEnableSkyLightContribution,
			PathVertexRadiance);
		LastRoughness = Payload.Roughness;

		//
		// Handle no hit condition
		//

		if(RefractionRayIndex == 0)
		{
			HitDistance = Payload.HitT;
		}
		if (Payload.IsMiss())
		{
			if (bHasScattered && bAllowSkySampling)
			{
				// We only sample the sky if the ray has scattered (i.e. been refracted or reflected). Otherwise we are going ot use the regular scene color.
				PathRadiance += PathThroughput * GetSkyRadiance(Ray.Direction, LastRoughness);
			}
			break;
		}
		// Record the Opacity of the transparent object
		if (Payload.IsFrontFace() && Payload.BlendingMode == RAY_TRACING_BLEND_MODE_TRANSLUCENT)
		{
			DielectircOpacity = Payload.Ior;
		}

		float3 HitPoint = Ray.Origin + Ray.Direction * Payload.HitT;
		float NextMaxRayDistance = Ray.TMax - Payload.HitT;

		//
		// Handle surface lighting
		//

		float vertexRadianceWeight = Payload.Opacity;	// Opacity as coverage. This works for RAY_TRACING_BLEND_MODE_OPAQUE and RAY_TRACING_BLEND_MODE_TRANSLUCENT.
		// It is also needed for RAY_TRACING_BLEND_MODE_ADDITIVE and  RAY_TRACING_BLEND_MODE_ALPHA_COMPOSITE: radiance continbution is alway weighted by coverage.
		
		// Compute the volumetric absorption
		if(bIsInside)
		{
			PathRadiance -= RayAbsorb(DielectricAbsorbColor, Payload.HitT, DielectircOpacity);
		}
		if(RefractionRayIndex == 0)
		{
			ImaginaryDepth = Payload.HitT;
			PathRadiance += PathThroughput * vertexRadianceWeight * PathVertexRadiance;
		}
		else
		{
			PathRadiance += PathThroughput * vertexRadianceWeight * PathVertexRadiance;
		}
		
		AccumulatedOpacity += vertexRadianceWeight;

		const float LocalMaxRayDistance = bAllowSkySampling ? 1e27f : lerp(TranslucencyMaxRayDistance, TranslucencyMinRayDistance, Payload.Roughness);
		if (Payload.Roughness < TranslucencyMaxRoughness)
		{
			// Trace reflection ray 
			uint DummyVariable;
			float2 RandSample = RandomSequence_GenerateSample2D(RandSequence, DummyVariable);

			RayDesc ReflectionRay;
			ReflectionRay.TMin = 0.01;
			ReflectionRay.TMax = LocalMaxRayDistance;
			ReflectionRay.Origin = HitPoint;

#if GBUFFER_HAS_TANGENT
			ModifyGGXAnisotropicNormalRoughness(Payload.WorldTangent, Payload.Anisotropy, Payload.Roughness, Payload.WorldNormal, Ray.Direction);
#endif

			ReflectionRay.Direction = GenerateReflectedRayDirection(Ray.Direction, Payload.WorldNormal, Payload.Roughness, RandSample);
			ApplyPositionBias(ReflectionRay, Payload.WorldNormal, MaxNormalBias);

			const uint ReflectionRayFlags = RAY_FLAG_CULL_BACK_FACING_TRIANGLES;
			const uint ReflectionInstanceInclusionMask = RAY_TRACING_MASK_ALL;
			const bool bReflectionRayTraceSkyLightContribution = false;
			const bool bReflectionDecoupleSampleGeneration = true;
			const bool bReflectionEnableSkyLightContribution = bSkyLightAffectReflection;
			float3 ReflectionRadiance = float3(0, 0, 0);

			FMaterialClosestHitPayload ReflectionPayload = TraceRayAndAccumulateResults(
				ReflectionRay,
				TLAS,
				ReflectionRayFlags,
				ReflectionInstanceInclusionMask,
				RandSequence,
				PixelCoord,
				MaxNormalBias,
				ReflectedShadowsType,
				ShouldDoDirectLighting,
				ShouldDoEmissiveAndIndirectLighting,
				bReflectionRayTraceSkyLightContribution,
				bReflectionDecoupleSampleGeneration,
				RayCone,
				bReflectionEnableSkyLightContribution,
				ReflectionRadiance);

			// If we have not hit anything, sample the distance sky radiance.
			if (ReflectionPayload.IsMiss())
			{
				ReflectionRadiance = GetSkyRadiance(ReflectionRay.Direction, LastRoughness);
			}

			float NoV = saturate(dot(-Ray.Direction, Payload.WorldNormal));
			const float3 ReflectionThroughput = EnvBRDF(Payload.SpecularColor, Payload.Roughness, NoV);
			PathRadiance += PathThroughput * ReflectionThroughput * ReflectionRadiance * vertexRadianceWeight;
		}

		//
		// Handle refraction through the surface.
		//

		// Update the refraction path transmittance and check stop condition
		float PathVertexTransmittance = Payload.BlendingMode == RAY_TRACING_BLEND_MODE_ADDITIVE ? 1.0 : 1.0 - Payload.Opacity;
		PathThroughput *= PathVertexTransmittance;
		if (PathThroughput <= 0.0)
		{
			break;
		}

		// Set refraction ray for next iteration
		float3 RefractedDirection = Ray.Direction;
		if (TranslucencyRefraction)
		{
			//float Ior = Payload.Ior;
			float Ior = DielectricF0ToIor(DielectricSpecularToF0(Payload.Specular));
			bHasScattered |= Ior > 1.0 ? true : false;

			float ReflectionRefractionEventThroughput;
			bool bIsEntering = Payload.IsFrontFace();

			float3 N = Payload.WorldNormal;

			if(Payload.Roughness > 0)
			{
				BiasNormal(RandSequence, DispatchThreadId, N, Payload.Roughness);
			}

			float3 V = -Ray.Direction;
			float NoV = dot(N, V);

			// Hack to allow one-sided materials to be modeled as dielectrics
			if (NoV < 0.0)
			{
				NoV = -NoV;
				N = -N;
				bIsEntering = true;
			}
			float N1 = bIsEntering ? 1.0 : Ior;
			float N2 = bIsEntering ? Ior : 1.0;
			float Eta = N1 / N2;
			float NoT = CalcNoT(NoV, N1, N2);
			float Fr = FresnelDielectric(Eta, NoV, NoT);

			float3 T = refract(Ray.Direction, N, Eta);


			float3 I = LightDataBuffer[0].Direction;
			float NoI = dot(I, N);
			if(NoI < 0)
			{
				N = -N;
				NoI = -NoI;
			}

			if (any(T) > 0.0)
			{
				RefractedDirection = T;
				PathThroughput *= 1.0 - Fr;
			}
			// Handle total internal reflection
			else
			{
				RefractedDirection = reflect(Ray.Direction, N);
			}
			NextMaxRayDistance = LocalMaxRayDistance;
		}


		//
		// Setup refracted ray to be traced
		//
		if(Payload.IsFrontFace() && Payload.BlendingMode == RAY_TRACING_BLEND_MODE_TRANSLUCENT)
		{
			bIsInside = true;
			DielectricAbsorbColor = Payload.DiffuseColor;
			DielectircOpacity = Payload.Ior;
			DielectricRoughness = Payload.Roughness;
		}
		if(!Payload.IsFrontFace())
		{
			bIsInside = false;
		}
		Ray.Origin = HitPoint;
		Ray.TMin = 0.01;
		Ray.TMax = NextMaxRayDistance;
		Ray.Direction = RefractedDirection;
		float SurfaceCurvature = 0.0f; /* #todo_dxr assume no curvature */
		RayCone = PropagateRayCone(RayCone, SurfaceCurvature, Depth);
	}

	if (!bHasScattered)
	{
		// Use the scene radiance for ray that has not been scattered/refracted (no surface or IORin=IORout). Still apply the throughtput in case we have traversed surfaces with opacity>0.
		PathRadiance += PathThroughput * SceneColorTexture.SampleLevel(GlobalPointClampedSampler, UV, 0).xyz / View.PreExposure;
		RayHitDistanceOutput[DispatchThreadId] = 0;
		RayImaginaryDepthOutput[DispatchThreadId] = 0.0f;
	}
	else
	{
		RayImaginaryDepthOutput[DispatchThreadId] = ImaginaryDepth;
		RayHitDistanceOutput[DispatchThreadId] = 500.0f;
	}

	float FinalAlpha = 0.0f;
	if (AccumulatedOpacity > 0.0f)
	{
		FinalAlpha = saturate(1.0 - AccumulatedOpacity);
	}
	else
	{
		FinalAlpha = SceneColorTexture.SampleLevel(GlobalPointClampedSampler, UV, 0).w;
	}

	if(ShouldUsePreExposure) 
	{
		PathRadiance.rgb *= View.PreExposure;
	}

	PathRadiance = ClampToHalfFloatRange(PathRadiance);
	FirstPathRadiance = ClampToHalfFloatRange(FirstPathRadiance);
	ColorOutput[DispatchThreadId] = float4(PathRadiance, FinalAlpha);
	CausticsColorOutput[DispatchThreadId] = float4(0,0,0,0);
}